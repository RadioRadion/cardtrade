<h1>Pages#home</h1>
<p>Find me in app/views/pages/home.html.erb</p>


<!-- code pour chopper toutes les cartes au démarrage -->
<% require 'csv'
cards = []
names = []
filepath = 'lib/datas/cards.csv'
CSV.foreach(filepath) do |row|
  # Here, row is an array of columns. 46 => name, 59 => setCode
  cards << [row[46], row[59]]
  names << row[46]
end
uniqsName = names.uniq.sort
  %>


  <form class="search-form">
    <input type="text" class="search" placeholder="City or State">
    <ul class="suggestions">
      <li>Filter for a city</li>
      <li>or a state</li>
    </ul>
  </form>

<div class="nextForm"></div>
<script>
  //Importation de la variable de ruby. raw permet d'éviter le soucis d'importation qui rajoute &quote à chaque entrée de l'array
 const uniqsName = <%= raw uniqsName %>;
 const cards =  <%= raw cards %>;

 let extensions = [];
// const cities = [];
// fetch(endpoint)
//   .then(blob => blob.json())
//   .then(data => cities.push(...data));

function findMatches(wordToMatch, uniqsName) {
  return uniqsName.filter(card => {
    const regex = new RegExp(wordToMatch, 'gi');
    return card.match(regex);
  });
}

function complete(name) {
  document.querySelector('.search').value = name;
  suggestions.innerHTML = "";
  let carte = name;
  cards.map ( (card) => {
  if (card[0] === carte)
    extensions.push(card[1]);
  });
  wholeForm();
}

const wholeForm = () => {
  const form =[`<option value=''>--Please choose an extension--</option>`];
  extensions.map( (extension) => {
    form.push(`<option value='${extension}'>${extension}</option>`);
  });
  nextForm.innerHTML = (`<label for="pet-select">Extension :</label>
    <select name="sets" id="set-select">
      ${form}
    </select>
    <label for="language-select">Langage :</label>
    <select name="languages" id="set-language">
      <option value='Indifférent'>Indifférent</option>
      <option value='Anglais'>Anglais</option>
      <option value='Français'>Français</option>
      <option value='Allemand'>Allemand</option>
      <option value='Italien'>Italien</option>
      <option value='Chinois - S'>Chinois - S</option>
      <option value='Japonais'>Japonais</option>
      <option value='Portugais'>Portugais</option>
      <option value='Russe'>Russe</option>
      <option value='Corréen'>Corréen</option>
      <option value='Chinois - T'>Chinois - T</option>
    </select>
    <label for="condition-select">Condition Minimale :</label>
    <select name="condition-min" id="set-condition">
      <option value='Indifférent'>Indifférent</option>
      <option value='Mint'>Mint</option>
      <option value='Near Mint'>Near Mint</option>
      <option value='Excellent'>Excellent</option>
      <option value='Good'>Good</option>
      <option value='Light Played'>Light Played</option>
      <option value='played'>played</option>
      <option value='Poor'>Poor</option>
    </select>
    <label for="foil-select">Foil ? :</label>
    <select name="foil" id="set-foil">
      <option value='Indifférent'>Indifférent</option>
      <option value='Yes'>Yes</option>
      <option value='No'>No</option>
    </select>`);
}

function displayMatches() {
  if (this.value.length > 1) {
    const matchArray = findMatches(this.value, uniqsName);
    const html = matchArray.map(card => {
      // const regex = new RegExp(this.value, 'gi');
      // const Name = card.replace(regex, `<span class="hl" >${this.value}</span>`);
      return `
        <li>
          <span class="name" onclick="complete('${card}')" >${card}</span>
        </li>
      `;
    }).join('');
    suggestions.innerHTML = html;
  }
}

const searchInput = document.querySelector('.search');
const suggestions = document.querySelector('.suggestions');
const nextForm = document.querySelector('.nextForm');


searchInput.addEventListener('change', displayMatches);
searchInput.addEventListener('keyup', displayMatches);


</script>

